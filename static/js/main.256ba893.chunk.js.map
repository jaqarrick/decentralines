{"version":3,"sources":["components/CenterVisualizer.js","components/DecenterVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["makeShape","svgHeight","centerCoor","randomXPoint","Math","floor","random","randomYPoint","circleCoor","cx","cy","radius","lineCoor","x1","y1","x2","y2","strokeWidth","stroke","CenterVisualizer","useState","shapes","setShapes","centerPoint","useMemo","animate","useCallback","setInterval","useEffect","onClick","height","width","r","fill","map","shape","i","Fragment","key","makeShapes","allPoints","randomShapeToConnect","coordinates","x","y","randomCoordinate","length","drawRandomConnection","DecenterVisualizer","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.256ba893.chunk.js","sourcesContent":["import React, {useState, useMemo, useCallback,useEffect} from 'react'\nimport './Visualizer.css'\n\n\n\nconst makeShape  = (svgHeight, centerCoor) => {\n\n    const randomXPoint = Math.floor(Math.random()*svgHeight)\n    const randomYPoint = Math.floor(Math.random()*svgHeight)\n   \n\n\n    return {\n        circleCoor: {\n            cx: randomXPoint,\n            cy: randomYPoint,\n            radius: 0\n        },\n        lineCoor: {\n            x1: randomXPoint,\n            y1: randomYPoint,\n            x2: centerCoor,\n            y2: centerCoor,\n            strokeWidth: 0.1,\n            stroke: \"#3c11c6\"\n        }\n    }\n}\n\n\nconst CenterVisualizer = () => {\n\n    const [shapes, setShapes] = useState([])\n    const [svgHeight] = useState(400)\n    const centerPoint = useMemo(() => svgHeight/2 , [svgHeight])\n\n\n    \n    const animate = useCallback(()=>{\n\n    \n        setInterval(()=> {\n            setShapes(shapes => [...shapes, makeShape(svgHeight, centerPoint)])\n\n        }, 1)\n    }, [setShapes,svgHeight, centerPoint])\n\n    useEffect(()=> animate() )\n    return(\n        <svg onClick={animate} height={svgHeight} width={svgHeight}>\n            <circle cx={centerPoint} cy={centerPoint} r=\"2\" stroke=\"black\" fill=\"black\"> </circle>\n            {shapes.map((shape, i) => {\n                const {circleCoor, lineCoor} = shape\n                const {cx, cy, radius} = circleCoor\n                const {x1, y1, x2, y2, strokeWidth, stroke} = lineCoor\n\n\n                return(\n                <React.Fragment key={i}>\n                    <line x1={x1} y1={y1} x2={x2} y2={y2} strokeWidth={strokeWidth} stroke={stroke} />\n                    <circle cx={cx} cy={cy} r={radius} stroke=\"black\" fill=\"black\"/>\n\n                </ React.Fragment>\n                )\n            })}\n        </svg>\n    )\n}\n\nexport default CenterVisualizer","import React, {useCallback, useEffect, useState} from 'react'\nimport './Visualizer.css'\n\n\nconst makeShapes = (shapes, svgHeight) => {\n    const allPoints = shapes.map(shape => {\n        if(shape){\n        const {x1, x2, y1, y2} = shape\n        return {x1, x2, y1, y2}\n        }\n        return null\n    })\n\n    const randomShapeToConnect = allPoints[Math.floor(Math.random()*allPoints.length)]\n\n    const drawRandomConnection = randomShapeToConnect => {\n        const {x1, x2, y1, y2} = randomShapeToConnect\n        const coordinates = [{x:x1, y:y1}, {x:x2, y:y2}]\n        const randomCoordinate = coordinates[Math.floor(Math.random()*coordinates.length)]\n\n        return {\n            x1: randomCoordinate.x,\n            y1: randomCoordinate.y,\n            x2: Math.floor(Math.random()*svgHeight),\n            y2: Math.floor(Math.random()*svgHeight)\n        }\n\n    }\n    return drawRandomConnection(randomShapeToConnect)\n}\nconst DecenterVisualizer = () => {\n   const [svgHeight] = useState(400)\n   const [shapes, setShapes] = useState([{\n       x1:Math.floor(Math.random()*svgHeight),\n       y1:Math.floor(Math.random()*svgHeight),\n       x2: Math.floor(Math.random()*svgHeight),\n       y2: Math.floor(Math.random()*svgHeight),\n   }])\n\n   const animate = useCallback(() => {\n       setInterval(() => {    \n        setShapes(shapes => [...shapes, makeShapes(shapes, svgHeight)])\n    }, 1)\n       \n   }, [svgHeight])\n\n   useEffect(()=>animate())\n    return <svg onClick={animate} height={svgHeight} width={svgHeight}> \n        {shapes.map((shape, i ) => {\n            const {x1, x2, y1, y2} = shape\n\n            return(\n                <line key={i} x1={x1} x2={x2} y1={y1} y2={y2} strokeWidth={0.1} stroke=\"#3c11c6\" />\n            )\n        })}\n    </svg>\n}\n\nexport default DecenterVisualizer","import React from 'react'\nimport './App.css'\nimport CenterVisualizer from './components/CenterVisualizer'\nimport DecenterVisualizer from './components/DecenterVisualizer'\n\nconst App = () => {\n\n  return (\n    <div className='svg-container'>\n      <CenterVisualizer />\n      <DecenterVisualizer />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}