{"version":3,"sources":["components/DecenterVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["makeShapes","shapes","svgHeight","allPoints","map","shape","x1","x2","y1","y2","randomShapeToConnect","coordinates","x","y","randomCoordinate","Math","floor","random","length","drawRandomConnection","DecenterVisualizer","useState","setShapes","animate","useCallback","setInterval","useEffect","height","width","i","key","strokeWidth","stroke","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAGMA,G,KAAa,SAACC,EAAQC,GAC3B,IAAMC,EAAYF,EAAOG,KAAI,SAAAC,GAC5B,OAAIA,EAEI,CAAEC,GADkBD,EAAnBC,GACKC,GADcF,EAAfE,GACKC,GADUH,EAAXG,GACKC,GADMJ,EAAPI,IAGd,QAsBR,OAhB6B,SAAAC,GAAyB,IAC7CJ,EAAmBI,EAAnBJ,GAAIC,EAAeG,EAAfH,GACNI,EAAc,CACnB,CAAEC,EAAGN,EAAIO,EAFiBH,EAAXF,IAGf,CAAEI,EAAGL,EAAIM,EAHiBH,EAAPD,KAKdK,EACLH,EAAYI,KAAKC,MAAMD,KAAKE,SAAWN,EAAYO,SAEpD,MAAO,CACNZ,GAAIQ,EAAiBF,EACrBJ,GAAIM,EAAiBD,EACrBN,GAAIQ,KAAKC,MAAMD,KAAKE,SAAWf,GAC/BO,GAAIM,KAAKC,MAAMD,KAAKE,SAAWf,IAG1BiB,CAlBNhB,EAAUY,KAAKC,MAAMD,KAAKE,SAAWd,EAAUe,YA2DlCE,EAvCY,WAAO,IAAD,EACZC,mBAAS,KAAtBnB,EADyB,sBAEJmB,mBAAS,CACpC,CACCf,GAAIS,KAAKC,MAAMD,KAAKE,SAAWf,GAC/BM,GAAIO,KAAKC,MAAMD,KAAKE,SAAWf,GAC/BK,GAAIQ,KAAKC,MAAMD,KAAKE,SAAWf,GAC/BO,GAAIM,KAAKC,MAAMD,KAAKE,SAAWf,MAPD,mBAEzBD,EAFyB,KAEjBqB,EAFiB,KAW1BC,EAAUC,uBAAY,WAC3BC,aAAY,WACXH,GAAU,SAAArB,GAAM,4BAAQA,GAAR,CAAgBD,EAAWC,EAAQC,UACjD,KACD,CAACA,IAGJ,OADAwB,qBAAU,kBAAMH,OAEf,yBAAKI,OAAQzB,EAAW0B,MAAO1B,GAC7BD,EAAOG,KAAI,SAACC,EAAOwB,GAAO,IAClBvB,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,GAAIC,EAAWH,EAAXG,GAAIC,EAAOJ,EAAPI,GAEpB,OACC,0BACCqB,IAAKD,EACLvB,GAAIA,EACJC,GAAIA,EACJC,GAAIA,EACJC,GAAIA,EACJsB,YAAa,GACbC,OAAO,iBClDEC,EATH,WACX,OACC,yBAAKC,UAAU,iBAEd,kBAAC,EAAD,QCGiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f762d7c.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\"\nimport \"./Visualizer.css\"\n\nconst makeShapes = (shapes, svgHeight) => {\n\tconst allPoints = shapes.map(shape => {\n\t\tif (shape) {\n\t\t\tconst { x1, x2, y1, y2 } = shape\n\t\t\treturn { x1, x2, y1, y2 }\n\t\t}\n\t\treturn null\n\t})\n\n\tconst randomShapeToConnect =\n\t\tallPoints[Math.floor(Math.random() * allPoints.length)]\n\n\tconst drawRandomConnection = randomShapeToConnect => {\n\t\tconst { x1, x2, y1, y2 } = randomShapeToConnect\n\t\tconst coordinates = [\n\t\t\t{ x: x1, y: y1 },\n\t\t\t{ x: x2, y: y2 },\n\t\t]\n\t\tconst randomCoordinate =\n\t\t\tcoordinates[Math.floor(Math.random() * coordinates.length)]\n\n\t\treturn {\n\t\t\tx1: randomCoordinate.x,\n\t\t\ty1: randomCoordinate.y,\n\t\t\tx2: Math.floor(Math.random() * svgHeight),\n\t\t\ty2: Math.floor(Math.random() * svgHeight),\n\t\t}\n\t}\n\treturn drawRandomConnection(randomShapeToConnect)\n}\nconst DecenterVisualizer = () => {\n\tconst [svgHeight] = useState(400)\n\tconst [shapes, setShapes] = useState([\n\t\t{\n\t\t\tx1: Math.floor(Math.random() * svgHeight),\n\t\t\ty1: Math.floor(Math.random() * svgHeight),\n\t\t\tx2: Math.floor(Math.random() * svgHeight),\n\t\t\ty2: Math.floor(Math.random() * svgHeight),\n\t\t},\n\t])\n\n\tconst animate = useCallback(() => {\n\t\tsetInterval(() => {\n\t\t\tsetShapes(shapes => [...shapes, makeShapes(shapes, svgHeight)])\n\t\t}, 1)\n\t}, [svgHeight])\n\n\tuseEffect(() => animate())\n\treturn (\n\t\t<svg height={svgHeight} width={svgHeight}>\n\t\t\t{shapes.map((shape, i) => {\n\t\t\t\tconst { x1, x2, y1, y2 } = shape\n\n\t\t\t\treturn (\n\t\t\t\t\t<line\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tx1={x1}\n\t\t\t\t\t\tx2={x2}\n\t\t\t\t\t\ty1={y1}\n\t\t\t\t\t\ty2={y2}\n\t\t\t\t\t\tstrokeWidth={0.1}\n\t\t\t\t\t\tstroke='#3c11c6'\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t})}\n\t\t</svg>\n\t)\n}\n\nexport default DecenterVisualizer\n","import React from \"react\"\nimport \"./App.css\"\nimport CenterVisualizer from \"./components/CenterVisualizer\"\nimport DecenterVisualizer from \"./components/DecenterVisualizer\"\n\nconst App = () => {\n\treturn (\n\t\t<div className='svg-container'>\n\t\t\t{/* <CenterVisualizer /> */}\n\t\t\t<DecenterVisualizer />\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}